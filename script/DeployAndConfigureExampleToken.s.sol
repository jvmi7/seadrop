// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "forge-std/Script.sol";
import { ERC721SeaDropMetadata } from "../src/custom/ERC721SeaDropCustom.sol";
import { MetadataRenderer } from "../src/custom/MetadataRenderer.sol";
import { ISeaDrop } from "../src/interfaces/ISeaDrop.sol";
import { PublicDrop } from "../src/lib/SeaDropStructs.sol";
import { Strings } from "openzeppelin-contracts/utils/Strings.sol";

contract DeployAndConfigureExampleToken is Script {
    using Strings for uint256;
    
    // Addresses
    address seadrop = 0x00005EA00Ac477B1030CE78506496e8C2dE24bf5;
    address creator = 0x49A177C521B8b0710330392b862293716E2237B9;
    address feeRecipient = 0x49A177C521B8b0710330392b862293716E2237B9;

    // Token config
    uint256 maxSupply = 100;

    // Drop config
    uint16 feeBps = 500; // 5%
    uint80 mintPrice = 0.0000 ether;
    uint16 maxTotalMintableByWallet = 10;

    ERC721SeaDropMetadata token;

    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        // First deploy the NFT contract
        address[] memory allowedSeadrop = new address[](1);
        allowedSeadrop[0] = seadrop;

        // Deploy NFT contract first
        token = new ERC721SeaDropMetadata(
            "Example Token",
            "ExTKN",
            allowedSeadrop
        );

        // Then deploy renderer with NFT contract address
        MetadataRenderer renderer = new MetadataRenderer(address(token));

        // Set the renderer in the NFT contract
        token.setMetadataRenderer(address(renderer));

        // Configure the token.
        token.setMaxSupply(maxSupply);

        // Configure the drop parameters.
        token.updateCreatorPayoutAddress(seadrop, creator);
        token.updateAllowedFeeRecipient(seadrop, feeRecipient, true);
        token.updatePublicDrop(
            seadrop,
            PublicDrop(
                mintPrice,
                uint48(block.timestamp), // start time
                uint48(block.timestamp) + 1000, // end time
                maxTotalMintableByWallet,
                feeBps,
                true
            )
        );

        // We are ready, let's mint the first 3 tokens!
        ISeaDrop(seadrop).mintPublic{ value: mintPrice * 7 }(
            address(token),
            feeRecipient,
            address(0),
            7 // quantity
        );

        // Generate random values for each token
        uint8[7] memory classicValues;
        uint8[7] memory iceValues;
        uint8[7] memory fireValues;
        uint8[7] memory punchValues;
        uint8[7] memory chromaticValues;
        uint8[7] memory pastelValues;
        uint8[7] memory greyscaleValues;

        // Fill arrays with random values between 1 and 100
        for (uint256 i = 0; i < 3; i++) {
            classicValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "classic"))), 1, 100));
            iceValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "ice"))), 1, 100));
            fireValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "fire"))), 1, 100));
            punchValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "punch"))), 1, 100));
            chromaticValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "chromatic"))), 1, 100));
            pastelValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "pastel"))), 1, 100));
            greyscaleValues[i] = uint8(bound(uint256(keccak256(abi.encodePacked(block.timestamp, i, "greyscale"))), 1, 100));
        }

        // Set metadata for each token with different palettes and random values
        token.setTokenMetadata(
            1,                          // tokenId
            string(abi.encodePacked("Example Token #", Strings.toString(1))), // name
            "An example NFT with dynamic values",  // description
            "",                         // image (generated by SVG)
            "",                         // animationUrl
            classicValues,              // random values array
            0                           // palette (0 = CLASSIC)
        );

        token.setTokenMetadata(
            2,
            string(abi.encodePacked("Example Token #", Strings.toString(2))),
            "An example NFT with dynamic values",
            "",
            "",
            iceValues,                  // random values array
            1                           // palette (1 = ICE)
        );

        token.setTokenMetadata(
            3,
            string(abi.encodePacked("Example Token #", Strings.toString(3))),
            "An example NFT with dynamic values",
            "",
            "",
            fireValues,                 // random values array
            2                           // palette (2 = FIRE)
        );

        token.setTokenMetadata(
            4,
            string(abi.encodePacked("Example Token #", Strings.toString(4))),
            "An example NFT with dynamic values",
            "",
            "",
            punchValues,                 // random values array
            3                           // palette (3 = PUNCH)
        );

        token.setTokenMetadata(
            5,
            string(abi.encodePacked("Example Token #", Strings.toString(5))),
            "An example NFT with dynamic values",
            "",
            "",
            chromaticValues,                 // random values array
            4                           // palette (4 = CHROMATIC)
        );

        token.setTokenMetadata(
            6,
            string(abi.encodePacked("Example Token #", Strings.toString(6))),
            "An example NFT with dynamic values",
            "",
            "",
            pastelValues,                 // random values array
            5                           // palette (5 = PASTEL)
        );

        token.setTokenMetadata(
            7,
            string(abi.encodePacked("Example Token #", Strings.toString(7))),
            "An example NFT with dynamic values",
            "",
            "",
            greyscaleValues,                 // random values array
            6                           // palette (6 = GREYSCALE)
        );

        vm.stopBroadcast();
    }
}
